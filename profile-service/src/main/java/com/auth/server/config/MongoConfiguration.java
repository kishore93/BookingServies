package com.auth.server.config;

import javax.annotation.Resource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
import org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;
import org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper;
import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
import org.springframework.data.mongodb.core.mapping.MongoMappingContext;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;

@Configuration
public class MongoConfiguration {

	@Resource
	MongoDBConfigParams mongoConfig;

	@Bean
	public MongoDbFactory mongoDbFactory(MongoDBConfigParams mongoConfig) {

		StringBuilder mongoUrl = new StringBuilder("mongodb+srv://");
		mongoUrl.append(mongoConfig.getUsername() + ":");
		mongoUrl.append(mongoConfig.getPassword() + "@");
		mongoUrl.append(mongoConfig.getHost() + "/");
		mongoUrl.append(mongoConfig.getAuthenticationDatabase());
		mongoUrl.append("?retryWrites=true&w=majority");
		
		MongoClient client = new MongoClient(new MongoClientURI(mongoUrl.toString()));

		return new SimpleMongoDbFactory(client, mongoConfig.getAuthenticationDatabase());

	}

	@Bean
	public MongoTemplate apiMongoTemplate(MongoDbFactory mongoDbFactory) {
		MappingMongoConverter converter = new MappingMongoConverter(new DefaultDbRefResolver(mongoDbFactory),
				new MongoMappingContext());
		// Removing _class attribute generated by default.
		converter.setTypeMapper(new DefaultMongoTypeMapper(null));
		// Map with keys containing "dots" will be rejected as the conversion
		// for the entire object will fail.
		// Setting the replacement value of "-" for all "dots" in keys.
		converter.setMapKeyDotReplacement("\\-\\-");
		return new MongoTemplate(mongoDbFactory, converter);

	}
}
